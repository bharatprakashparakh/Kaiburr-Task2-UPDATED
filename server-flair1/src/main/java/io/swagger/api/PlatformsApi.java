/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.15-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Platform;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-06-20T11:30:19.835+05:30")

@Api(value = "platforms", description = "the platforms API")
@RequestMapping(value = "")
public interface PlatformsApi {

    @ApiOperation(value = "Add a new platform to the list", nickname = "addPlatform", notes = "Add a new platform", tags={ "platform", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/platforms",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addPlatform(@ApiParam(value = "Platform object that needs to be added to the list" ,required=true )  @Valid @RequestBody Platform platform);


    @ApiOperation(value = "Deletes a platform", nickname = "deletePlatform", notes = "Details of platform to delete", tags={ "platform", })
    @ApiResponses(value = { 
        
        @ApiResponse(code = 404, message = "Platform not found") })
    @RequestMapping(value = "/platforms/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePlatform(@ApiParam(value = "Platform id to delete",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Find all platforms", nickname = "getAllPlatforms", notes = "Returns all available Platform", response = Platform.class, responseContainer = "List", tags={ "platform", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Platform.class, responseContainer = "List")
         })
    @RequestMapping(value = "/platforms",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Platform>> getAllPlatforms();


    @ApiOperation(value = "Find platform by ID", nickname = "getPlatformById", notes = "Returns a single Platform", response = Platform.class, tags={ "platform", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Platform.class),
        @ApiResponse(code = 400, message = "Invalid Platform ID supplied"),
        @ApiResponse(code = 404, message = "Platform not found") })
    @RequestMapping(value = "/platforms/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Platform> getPlatformById(@ApiParam(value = "ID of Platform to return",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Find platform by Name", nickname = "getPlatformByName", notes = "Returns a list of Platform", response = Platform.class, responseContainer = "List", tags={ "platform", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Platform.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid Platform Name supplied"),
        @ApiResponse(code = 404, message = "Platform not found") })
    @RequestMapping(value = "/platforms/platformDetails/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Platform>> getPlatformByName(@ApiParam(value = "Name of Platform to return",required=true) @PathVariable("name") String name);


    @ApiOperation(value = "Update an existing platform", nickname = "updatePlatform", notes = "Details to be updated", tags={ "platform", })
    @ApiResponses(value = { 
        
        @ApiResponse(code = 404, message = "Platform not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/platforms",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePlatform(@ApiParam(value = "Platform object that needs to be updated in the list" ,required=true )  @Valid @RequestBody Platform platform);

}
